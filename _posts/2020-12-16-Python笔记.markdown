---
layout:     post
title:      "Python笔记"
subtitle:   "busy"
date:       2020-12-16
author:     "Lydia"
header-img: "img/post-bg-design.jpg"
catalog: true
tags:
    - Python
---

## 变量、运算符与数据类型

## 运算符

<b>算术运算符</b>

| 操作符 |      名称      |   示例   |
| :----: | :------------: | :------: |
|  `+`   |       加       | `1 + 1`  |
|  `-`   |       减       | `2 - 1`  |
|  `*`   |       乘       | `3 * 4`  |
|  `/`   |       除       | `3 / 4`  |
|  `//`  | 整除（地板除） | `3 // 4` |
|  `%`   |      取余      | `3 % 4`  |
|  `**`  |       幂       | `2 ** 3` |

<b>比较运算符</b>

| 操作符 |   名称   |   示例   |
| :----: | :------: | :------: |
|  `>`   |   大于   | `2 > 1`  |
|  `>=`  | 大于等于 | `2 >= 4` |
|  `<`   |   小于   | `1 < 2`  |
|  `<=`  | 小于等于 | `5 <= 2` |
|  `==`  |   等于   | `3 == 4` |
|  `!=`  |  不等于  | `3 != 5` |

<b>逻辑运算符</b>

<b>位运算符</b>

<b>三元运算符</b>

<b>其他运算符</b>

<b>运算符优先级</b>

## 函数

### print()

```
print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
```

- 将对象以字符串表示的方式格式化输出到流文件对象file里。其中所有非关键字参数都按`str()`方式进行转换为字符串输出；
- 关键字参数`sep`是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；
- 关键字参数`end`是输出结束时的字符，默认是换行符`\n`；
- 关键字参数`file`是定义流输出的文件，可以是标准的系统输出`sys.stdout`，也可以重定义为别的文件；
- 关键字参数`flush`是立即把内容输出到流文件，不作缓存。

### range()

```
enumerate(sequence, [start=0])
```

- sequence：一个序列、迭代器或其他支持迭代对象。
- start：下标起始位置。
- 返回 enumerate(枚举) 对象

### enumerate()

```
enumerate(sequence, [start=0])
```

- sequence：一个序列、迭代器或其他支持迭代对象。
- start：下标起始位置。
- 返回 enumerate(枚举) 对象


## 推导式

### 列表推导式

```
[ expr for value in collection [if condition] ]
```

### 元组推导式

```
( expr for value in collection [if condition] )
```

### 字典推导式

```
{ key_expr: value_expr for value in collection [if condition] }
```

### 集合推导式

```
{ expr for value in collection [if condition] }
c = {i for i in [1, 2, 3, 4, 5, 5, 6, 4, 3, 2, 1]}
print(c)
# {1, 2, 3, 4, 5, 6}
```

### 其他

next(iterator[, default])

```
e = (i for i in range(10))
print(e)
# <generator object <genexpr> at 0x0000007A0B8D01B0>

print(next(e))  # 0
print(next(e))  # 1

for each in e:
    print(each, end=' ')

# 2 3 4 5 6 7 8 9
```


## 异常处理

### 标准异常总结：

- BaseException：所有异常的 **基类**
- Exception：常规异常的 **基类**
- StandardError：所有的内建标准异常的基类
- ArithmeticError：所有数值计算异常的基类
- FloatingPointError：浮点计算异常
- <u>OverflowError</u>：数值运算超出最大限制
- <u>ZeroDivisionError</u>：除数为零
- <u>AssertionError</u>：断言语句（assert）失败
- <u>AttributeError</u>：尝试访问未知的对象属性
- EOFError：没有内建输入，到达EOF标记
- EnvironmentError：操作系统异常的基类
- IOError：输入/输出操作失败
- <u>OSError</u>：操作系统产生的异常（例如打开一个不存在的文件）
- WindowsError：系统调用失败
- <u>ImportError</u>：导入模块失败的时候
- KeyboardInterrupt：用户中断执行
- LookupError：无效数据查询的基类
- <u>IndexError</u>：索引超出序列的范围
- <u>KeyError</u>：字典中查找一个不存在的关键字
- <u>MemoryError</u>：内存溢出（可通过删除对象释放内存）
- <u>NameError</u>：尝试访问一个不存在的变量
- UnboundLocalError：访问未初始化的本地变量
- ReferenceError：弱引用试图访问已经垃圾回收了的对象
- RuntimeError：一般的运行时异常
- NotImplementedError：尚未实现的方法
- <u>SyntaxError</u>：语法错误导致的异常
- IndentationError：缩进错误导致的异常
- TabError：Tab和空格混用
- SystemError：一般的解释器系统异常
- <u>TypeError</u>：不同类型间的无效操作
- <u>ValueError</u>：传入无效的参数
- UnicodeError：Unicode相关的异常
- UnicodeDecodeError：Unicode解码时的异常
- UnicodeEncodeError：Unicode编码错误导致的异常
- UnicodeTranslateError：Unicode转换错误导致的异常

相关层次关系如下：

![](https://img-blog.csdnimg.cn/20200710131404548.png)

### 标准警告总结

- Warning：警告的基类
- DeprecationWarning：关于被弃用的特征的警告
- FutureWarning：关于构造将来语义会有改变的警告
- UserWarning：用户代码生成的警告
- PendingDeprecationWarning：关于特性将会被废弃的警告
- RuntimeWarning：可疑的运行时行为(runtime behavior)的警告
- SyntaxWarning：可疑语法的警告
- ImportWarning：用于在导入模块过程中触发的警告
- UnicodeWarning：与Unicode相关的警告
- BytesWarning：与字节或字节码相关的警告
- ResourceWarning：与资源使用相关的警告



## PS

jupyter notebook 真的太好用了